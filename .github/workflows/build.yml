name: "Build CI"

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to ACR
        run: az acr login --name haykdevacregistry

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Get changed files
        run: |
            set -euo pipefail
            BEFORE="${{ github.event.before }}"
            if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            # first push on branch
            CHANGED=$(git diff-tree --no-commit-id --name-only -r "${{ github.sha }}" -- .)
            else
            # ensure BEFORE exists in shallow clones
            git rev-parse "$BEFORE" >/dev/null 2>&1 || git fetch --no-tags origin "$BEFORE"
            CHANGED=$(git diff --name-only "$BEFORE" "${{ github.sha }}" -- .)
            fi

            # We're in ./app â†’ paths look like "<service>/..."
            # exclude VERSION files and collapse to unique service names
            CHANGED=$(echo "$CHANGED" | grep -vE '^[^/]+/VERSION$' || true)
            echo "$CHANGED"
            IFS='/' read -r -a paths <<< "$CHANGED"
            SERVICES="${paths[1]}"

            echo "::group::Changed files"; echo "$CHANGED"; echo "::endgroup::"
            echo "::notice::Detected services: ${SERVICES:-<none>}"
            echo "SERVICES=$SERVICES" >> $GITHUB_ENV


      - name: Read and bump version
        id: version
        run: |
            set -euo pipefail
            [ -z "${SERVICES:-}" ] && { echo "::notice::No changed services; skipping"; exit 0; }

            for service in ${{ env.SERVICES }}; do
                ver_file="$service/VERSION"
                [ -f "$ver_file" ] || { echo "::error file not found: $ver_file"; exit 1; }

                version=$(tr -d '\r\n' < "$ver_file")
                IFS='.' read -r major minor patch <<< "$version"
                new_version="$major.$minor.$((patch + 1))"

                echo "$new_version" > "$ver_file"
                echo "${service}_version=$new_version" >> "$GITHUB_OUTPUT"

                echo "::notice::Bumping $service: $old -> $new"
                echo "$new" > "$ver_file"
            done




      - name: Commit updated VERSION file
        run: |
          set -euo pipefail
          [ -z "${SERVICES:-}" ] && { echo "::notice::No changed services; skip commit"; exit 0; }
          git config user.name "github-actions"
          git config user.email "ci@github.com"
          
          for service in ${{ env.SERVICES }}; do
            git add "$service/VERSION"
          done
            git commit -m "CI: bump service versions [skip ci]" || echo "no changes"
            git push


      - name: Build & push changed services
        run: |
            set -euo pipefail
            [ -z "${SERVICES:-}" ] && { echo "No changed services"; exit 0; }
            REG=haykdevacregistry.azurecr.io



            echo "::group::Docker/ACR info"
            docker version
            docker info | sed -n '1,40p'
            az account show --output table || true
            az acr show -n haykdevacregistry --output table || true
            echo "::endgroup::"

            for service in $SERVICES; do
                ver=$(tr -d '\r\n' < "$service/VERSION")
                echo "::notice::Building $service as $REG/$service:latest and :$ver"

                docker build -t $REG/$service:latest -t $REG/$service:$ver $service
                docker push $REG/$service:latest
                docker push $REG/$service:$ver

                az acr repository show-tags --name haykdevacregistry --repository $service -o table || true

            done